//
//  FramesGenerator.swift
//  YaAnimator
//
//  Created by Vlad Eliseev on 04.11.2024.
//

import Foundation
import UIKit

final class FramesGenerator {
    
    private let exampleCanvasSize = CGSize(width: 374.0, height: 667.0)
    private let heartCoords: [CGPoint] = [(202.0, 457.3333282470703), (195.3333282470703, 454.3333282470703), (192.3333282470703, 451.6666564941406), (189.0, 448.3333282470703), (184.3333282470703, 443.6666564941406), (179.3333282470703, 439.3333282470703), (174.3333282470703, 435.0), (169.66665649414062, 430.0), (165.0, 424.6666564941406), (159.66665649414062, 418.6666564941406), (154.0, 411.3333282470703), (148.3333282470703, 403.6666564941406), (142.66665649414062, 396.6666564941406), (137.3333282470703, 389.6666564941406), (132.0, 383.0), (126.66665649414062, 376.0), (121.0, 369.3333282470703), (116.0, 362.3333282470703), (111.33332824707031, 355.3333282470703), (106.33332824707031, 348.3333282470703), (101.33332824707031, 341.3333282470703), (96.33332824707031, 334.3333282470703), (91.66665649414062, 326.6666564941406), (87.66665649414062, 319.0), (83.66665649414062, 311.3333282470703), (80.66665649414062, 304.0), (77.66665649414062, 297.0), (74.66665649414062, 289.6666564941406), (72.33332824707031, 282.6666564941406), (69.66665649414062, 275.3333282470703), (67.0, 268.0), (64.66665649414062, 260.6666564941406), (61.666656494140625, 253.0), (58.33332824707031, 245.66665649414062), (55.666656494140625, 238.3333282470703), (52.33332824707031, 231.0), (49.33332824707031, 223.66665649414062), (46.0, 216.3333282470703), (43.0, 208.66665649414062), (40.666656494140625, 201.0), (38.33332824707031, 192.66665649414062), (37.0, 184.3333282470703), (36.33332824707031, 176.0), (36.0, 167.66665649414062), (36.0, 159.3333282470703), (36.0, 151.3333282470703), (36.0, 143.66665649414062), (36.0, 136.66665649414062), (37.33332824707031, 130.3333282470703), (40.33332824707031, 125.0), (43.666656494140625, 119.33332824707031), (48.0, 113.66665649414062), (52.666656494140625, 109.0), (58.33332824707031, 104.0), (64.0, 99.66665649414062), (70.0, 95.66665649414062), (75.66665649414062, 91.33332824707031), (81.66665649414062, 87.66665649414062), (88.0, 84.0), (94.0, 81.0), (99.66665649414062, 80.0), (106.0, 79.66665649414062), (112.0, 79.66665649414062), (117.66665649414062, 79.66665649414062), (123.0, 81.33332824707031), (128.3333282470703, 84.0), (134.0, 87.0), (139.66665649414062, 90.66665649414062), (145.0, 95.33332824707031), (150.3333282470703, 100.0), (155.3333282470703, 105.0), (159.66665649414062, 110.0), (164.0, 114.66665649414062), (167.66665649414062, 120.0), (171.0, 126.0), (173.3333282470703, 132.0), (175.66665649414062, 138.0), (177.0, 144.0), (178.3333282470703, 150.0), (179.3333282470703, 157.0), (180.3333282470703, 163.3333282470703), (181.0, 168.3333282470703), (181.3333282470703, 171.66665649414062), (181.3333282470703, 172.66665649414062), (181.3333282470703, 172.0), (181.3333282470703, 169.0), (181.3333282470703, 163.3333282470703), (181.3333282470703, 152.66665649414062), (181.3333282470703, 140.3333282470703), (184.0, 129.66665649414062), (187.0, 121.0), (190.3333282470703, 114.0), (195.0, 108.0), (200.0, 102.66665649414062), (205.66665649414062, 97.0), (212.0, 92.66665649414062), (218.66665649414062, 89.66665649414062), (225.3333282470703, 88.0), (231.66665649414062, 86.33332824707031), (238.0, 85.33332824707031), (244.3333282470703, 84.33332824707031), (250.3333282470703, 83.66665649414062), (256.3333282470703, 83.66665649414062), (262.3333282470703, 83.66665649414062), (268.6666564941406, 83.66665649414062), (274.6666564941406, 83.66665649414062), (281.3333282470703, 83.66665649414062), (287.3333282470703, 86.0), (293.0, 88.33332824707031), (298.6666564941406, 92.33332824707031), (303.6666564941406, 96.66665649414062), (308.0, 102.0), (312.3333282470703, 107.66665649414062), (315.3333282470703, 113.33332824707031), (318.0, 119.0), (319.6666564941406, 125.33332824707031), (320.3333282470703, 133.0), (320.6666564941406, 142.66665649414062), (320.6666564941406, 154.0), (320.6666564941406, 164.66665649414062), (320.6666564941406, 173.3333282470703), (320.6666564941406, 181.66665649414062), (320.3333282470703, 190.0), (318.6666564941406, 199.0), (315.6666564941406, 210.0), (312.3333282470703, 221.66665649414062), (308.0, 235.3333282470703), (303.3333282470703, 250.66665649414062), (298.0, 267.0), (292.3333282470703, 283.6666564941406), (286.3333282470703, 300.6666564941406), (279.6666564941406, 318.0), (272.3333282470703, 336.3333282470703), (263.6666564941406, 357.3333282470703), (254.0, 379.6666564941406), (243.0, 401.6666564941406), (231.3333282470703, 421.0), (219.66665649414062, 438.6666564941406), (209.3333282470703, 457.6666564941406), (203.3333282470703, 484.0)].map { CGPoint(x: $0.0, y: $0.1) }
    

    private let painter = Painter()
    
    func generateExampleFrames(count: Int, canvasSize: CGSize) -> [Frame] {
        
        let heartStep = 0.05
        let canvasHalfWidth = canvasSize.width / 2
        let canvasHalfHeight = canvasSize.height / 2
        let canvasScaleHorizontal = canvasSize.width / exampleCanvasSize.width
        let canvasScaleVertical = canvasSize.height / exampleCanvasSize.height
        let scaledHeartCoords = heartCoords.map { CGPoint(x: $0.x * canvasScaleHorizontal, y: $0.y * canvasScaleVertical) }
        
        var result = [Frame]()
        var temp: CGFloat = 1
        for number in stride(from: 0, to: count, by: 10) {
            let isHeartScalingDown = (number / 10) % 2 == 0
            for _ in 0 ..< 10 {
                if isHeartScalingDown {
                    temp -= heartStep
                } else {
                    temp += heartStep
                }
                let scaledHeartCoordsRelativeToCenter = scaledHeartCoords.map {
                    CGPoint(
                        x: (($0.x - canvasHalfWidth) * temp) + canvasHalfWidth,
                        y: (($0.y - canvasHalfHeight) * temp) + canvasHalfHeight
                    )
                }
                let drawHeartAction = Action(tool: .pen, selectedColor: .random(), selectedBrushSize: 14, points: scaledHeartCoordsRelativeToCenter)
                
                // todo: letter and change colors
                
                
                let frame = Frame()
                
                UIGraphicsBeginImageContextWithOptions(canvasSize, false, 0.0)
                
                guard let ctx = UIGraphicsGetCurrentContext() else { continue }
                
                painter.draw(action: drawHeartAction, context: ctx)
                
                let image = UIGraphicsGetImageFromCurrentImageContext()
                UIGraphicsEndImageContext()
                
                do {
                    try image?.pngData()?.write(to: frame.frameSource)
                } catch {
                    fatalError(error.localizedDescription)
                }
                
                result.append(frame)
            }
        }
        return result
    }
}
